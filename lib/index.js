// Generated by CoffeeScript 1.6.2
(function() {
  var Command, Mediator, factory, listenerCollection,
    __slice = [].slice;

  Command = require("./message");

  factory = require("./factory");

  listenerCollection = require("./factory/collection");

  Mediator = (function() {
    /*
    */
    function Mediator() {
      this._listeners = {};
    }

    /*
    */


    Mediator.prototype.on = function() {
      var collection, listeners, name, nameParts;

      name = arguments[0], listeners = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      nameParts = this._parse(name);
      if (!this._listeners[nameParts.name]) {
        this._listeners[nameParts.name] = {
          pre: [],
          post: []
        };
      }
      listeners = listenerCollection.create({
        mediator: this,
        options: listeners.map(function(listener) {
          return factory.create({
            mediator: this,
            options: this
          });
        })
      });
      if (nameParts.type) {
        collection = this._listeners(nameParts.type);
        collection.push(listeners);
      } else {
        this._listeners.callback = listeners;
      }
      return {
        dispose: function() {
          var i;

          if (collection) {
            return i = collection.indexOf(listeners);
          } else {
            return delete this._listeners[nameParts.name];
          }
        }
      };
    };

    /*
    */


    Mediator.prototype.once = function() {
      var listener, listeners, name;

      name = arguments[0], listeners = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      listeners.unshift(function(message, next) {
        listener.dispose();
        return next();
      });
      return listener = this.on.apply(this, [name].concat(listeners));
    };

    /*
    */


    Mediator.prototype.execute = function(nameOrMessage, data, next) {
      var chain, listener, msg;

      if (!nameOrMessage.__isCommand) {
        msg = new Message(nameOrMessage, data);
      } else {
        msg = nameOrMessage;
        next = data;
      }
      listener = this._listeners[cmd.name];
      if (!listener || !listener.callback) {
        return next(new Error("message '" + cmd.name + "' doesn't exist"));
      }
      chain = listeners.pre.concat(listener.callback).concat(listeners.post);
      return async.eachSeries(chain, (function(listener, next) {
        return listener(msg, next);
      }), function(err) {
        if (err != null) {
          return next(err);
        }
        return next.apply(null, [null].concat(__slice.call(msg.args)));
      });
    };

    /*
    */


    Mediator.prototype._parse = function(message) {
      var messageParts, name, type;

      messageParts = message.split(" ");
      name = messageParts.pop();
      type = messageParts.pop();
      return {
        type: type,
        name: name
      };
    };

    return Mediator;

  })();

  module.exports = function() {
    return new Mediator;
  };

}).call(this);
